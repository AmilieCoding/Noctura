package uwu.noctura.module.impl.exploit;

import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.network.play.server.S01PacketJoinGame;
import net.minecraft.network.play.server.S32PacketConfirmTransaction;
import net.minecraft.network.play.server.S40PacketDisconnect;
import uwu.noctura.event.Event;
import uwu.noctura.event.impl.EventReceivePacket;
import uwu.noctura.event.impl.EventSendPacket;
import uwu.noctura.event.impl.EventUpdate;
import uwu.noctura.module.Category;
import uwu.noctura.module.Module;
import uwu.noctura.module.ModuleInfo;
import uwu.noctura.utils.Wrapper;

import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.OptionalDouble;

@ModuleInfo(name = "FindAnticheat", displayName = "Find Anticheat", key = -1, cat = Category.Exploit)
public class FindAnticheat extends Module {

    boolean found, started, relog, addedOne;
    String ac = "";
    int ogTransaction;
    ArrayList<Integer> analyzeTransaction = new ArrayList<>();

    @Override
    public void onEvent(Event e){
        if(e instanceof EventUpdate){
            if(mc.thePlayer.ticksExisted > 1 && !relog){
                analyzeTransaction.clear();
                Wrapper.instance.log("Please relog in the server");
                relog = true;
            }
            if(mc.thePlayer.ticksExisted < 1){
                relog = false;
                started = false;
            }else{
                String ac = getAnticheat(analyzeTransaction);
                //Wrapper.instance.log(ac);
            }
        }
        if(e instanceof EventSendPacket){
            EventSendPacket s = (EventSendPacket) e;
            if(s.getPacket() instanceof C16PacketClientStatus){
                C16PacketClientStatus c = (C16PacketClientStatus) s.getPacket();
                if(c.getStatus() == C16PacketClientStatus.EnumState.PERFORM_RESPAWN){

                    System.out.println("Respawned");
                }
            }
        }
        if(e instanceof EventReceivePacket){
            EventReceivePacket r = (EventReceivePacket) e;
            if(r.getPacket() instanceof S01PacketJoinGame){
                System.out.println("Successfully logged in");
                if(addedOne){
                    started = false;
                }
            }
            if(r.getPacket() instanceof S40PacketDisconnect){
                System.out.println("Successfully disconnected");
                addedOne = false;
            }
            if(r.getPacket() instanceof S32PacketConfirmTransaction){
                S32PacketConfirmTransaction k = (S32PacketConfirmTransaction)r.getPacket();
                int id = k.getActionNumber();
                found = !getAnticheat(analyzeTransaction).equalsIgnoreCase("not found");
                if(found){
                    Wrapper.instance.log("Found");
                    started = false;
                }
                if(!started){
                    ogTransaction = id;
                    Wrapper.instance.log("Started searching " + id);
                    analyzeTransaction.clear();
                    analyzeTransaction.add(ogTransaction);
                    addedOne = true;
                }else{
                    //Wrapper.instance.log("Searching " + id);
                    analyzeTransaction.add(id);
                }
                started = true;
            }
        }
    }

    public String getAnticheat(ArrayList<Integer> analyzeTransaction){
        if(analyzeTransaction.isEmpty()) return "not found";
        int og = analyzeTransaction.get(0);

        if(analyzeTransaction.size() > 25){
            try{
                OptionalDouble average = analyzeTransaction
                        .stream()
                        .mapToDouble(a -> a)
                        .average();

                long positiveCount = analyzeTransaction.stream().filter(n -> n > 0).count();
                long negativeCount = analyzeTransaction.stream().filter(n -> n < 0).count();

                if(average.isPresent()){
                    double avg = average.getAsDouble();

                }

                // intave entre -1 et -9
                if(positiveCount <= 0 && negativeCount >= 10 && !anyUnderX(analyzeTransaction,-10)){
                    return "Intave";
                }

                // karhu -3010 and decreases
                if(positiveCount <= 0 && negativeCount >= 10 && !anyOverX(analyzeTransaction, -3000)){
                    if(og <= -3000 && og >= -3015){
                        int indOg = analyzeTransaction.indexOf(og);
                        int next = analyzeTransaction.get(indOg+1);
                        Wrapper.instance.log("og:" + og + " next:" + next + " cond: " + (og - 1 == next));
                        if(og - 1 == next){
                            return "Karhu";
                        }
                    }
                }
            }catch (ConcurrentModificationException e){
                e.printStackTrace();
            }
        }
        return "not found";
    }

    public static boolean anyUnderX(ArrayList<Integer> al, int x) {
        return al.stream().anyMatch(n -> n < x);
    }

    public static boolean anyOverX(ArrayList<Integer> al, int x) {
        return al.stream().anyMatch(n -> n > x);
    }

}
