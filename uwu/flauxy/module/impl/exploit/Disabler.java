package uwu.flauxy.module.impl.exploit;

import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0CPacketInput;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import uwu.flauxy.event.Event;
import uwu.flauxy.event.impl.EventMotion;
import uwu.flauxy.event.impl.EventReceivePacket;
import uwu.flauxy.event.impl.EventSendPacket;
import uwu.flauxy.event.impl.EventUpdate;
import uwu.flauxy.module.Category;
import uwu.flauxy.module.Module;
import uwu.flauxy.module.ModuleInfo;
import uwu.flauxy.module.setting.impl.ModeSetting;
import uwu.flauxy.utils.NumberUtil;
import uwu.flauxy.utils.PacketUtil;
import uwu.flauxy.utils.WorldUtil;
import uwu.flauxy.utils.Wrapper;
import uwu.flauxy.utils.timer.Timer;

import java.util.LinkedList;
import java.util.concurrent.ConcurrentLinkedQueue;

@ModuleInfo(name = "Disabler", displayName = "Disabler", key = -1, cat = Category.Exploit)
public class Disabler extends Module {

    public ModeSetting mode = new ModeSetting("Mode", "BlocksMC", "BlocksMC", "Ghostly", "Hypixel");

    private LinkedList packetBuffer = new LinkedList<Packet<INetHandlerPlayServer>>();
    private int ticks = 0;
    boolean expectedTeleport;
    private final ConcurrentLinkedQueue<Packet<?>> transactions = new ConcurrentLinkedQueue<>();
    Timer timer = new Timer();

    public Disabler(){
        addSettings(mode);
    }

    @Override
    public void onEnable() {
        ticks = 0;
        transactions.clear();
        packetBuffer.clear();
    }
    boolean stat;

    public void onEvent(Event e){
        if(e instanceof EventUpdate){
            if(WorldUtil.shouldNotRun()) return;
        }
        if(e instanceof EventSendPacket){

            EventSendPacket event = (EventSendPacket)e;
            switch(mode.getMode()){
                case "Ghostly":{
                    if(!WorldUtil.shouldNotRun()){
                        if(event.getPacket() instanceof C03PacketPlayer){
                            packetBuffer.add(event.getPacket());
                            PacketUtil.sendSilentPacket(new C0CPacketInput(mc.thePlayer.movementInput.moveStrafe, 100, true, false));
                            event.setCancelled(true);
                        }
                        if(timer.hasTimeElapsed(450, true)){
                            //Wrapper.instance.log(packetBuffer.poll() + "");
                            PacketUtil.packetNoEvent( (Packet)packetBuffer.poll());
                            packetBuffer.clear();
                        }

                    }
                    break;
                }
                case "BlocksMC":{
                    if(!WorldUtil.shouldNotRun()){
                        if (event.getPacket() instanceof net.minecraft.network.play.client.C0BPacketEntityAction) {
                            event.setCancelled(true);
                            break;
                        }
                   /*if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                        short uid = ((C0FPacketConfirmTransaction)event.getPacket()).getUid();
                        if (uid > 0 && uid < 100){
                            return;
                        }
                        if (this.transactions.size() > 1200){
                            PacketUtil.packetNoEvent(this.transactions.poll());
                        }
                        this.transactions.add(event.getPacket());
                        event.setCancelled(true);
                    }*/
                        if(event.getPacket() instanceof C0FPacketConfirmTransaction) {
                            packetBuffer.add(event.getPacket());
                            event.setCancelled(true);
                            if(packetBuffer.size() > 215){
                                if(!stat){
                                    Wrapper.instance.log("§aSent §2" + packetBuffer.size() + " packets");
                                    stat = true;
                                }
                                PacketUtil.packetNoEvent((Packet<?>) packetBuffer.poll());
                            }
                        }

                    /*if(event.getPacket() instanceof C00PacketKeepAlive) {
                        packetBuffer.add(event.getPacket());
                        event.setCancelled(true);
                    }*/

                        if(packetBuffer.size() > 650) {
                            mc.getNetHandler().addToSendQueueNoEvent((Packet) packetBuffer.poll());
                        }
                        //void tp
                        if(event.getPacket() instanceof C03PacketPlayer) {
                            C03PacketPlayer c03 = (C03PacketPlayer)event.getPacket();
                            if (mc.thePlayer.ticksExisted % 32 == 0) {
                                C03PacketPlayer c03PacketPlayer = (C03PacketPlayer) event.getPacket();
                                c03.setY(c03.getPositionY() - 9.0);
                                c03PacketPlayer.setOnGround(false);
                                c03PacketPlayer.setMoving(false);
                            }

                        }
                    }

                    break;
                }
            }
        }
        if(e instanceof EventUpdate){
            switch (mode.getMode()){
                case "BlocksMC":{
                    if(!WorldUtil.shouldNotRun()){
                        if(mc.thePlayer.ticksExisted % 200 == 0){
                            while (transactions.size() > 320){
                                PacketUtil.packetNoEvent(transactions.poll());
                            }
                        }
                    }
                    break;
                }
            }
        }
        if(e instanceof EventMotion){
            switch(mode.getMode()){


                case "BlocksMC":{
                    if(!WorldUtil.shouldNotRun()){
                        if(ticks % 45 == 0){
                            expectedTeleport = true;
                        }
                        ticks++;
                    }

                    break;
                }
            }
        }
        if(e instanceof EventReceivePacket){
            EventReceivePacket event = (EventReceivePacket)e;
            switch(mode.getMode()){
                case "BlocksMC":{
                    if(!WorldUtil.shouldNotRun()){
                        if(timer.hasTimeElapsed(490L, true)){
                            timer.reset();
                            if(!packetBuffer.isEmpty()){
                                PacketUtil.packetNoEvent((Packet)packetBuffer.poll());
                            }
                        }
                        if(event.getPacket() instanceof S08PacketPlayerPosLook) {
                            S08PacketPlayerPosLook packetPlayerPosLook = (S08PacketPlayerPosLook) event.getPacket();
                            double x = packetPlayerPosLook.x - mc.thePlayer.posX;
                            double y = packetPlayerPosLook.y - mc.thePlayer.posY;
                            double z = packetPlayerPosLook.z - mc.thePlayer.posZ;
                            double diff = Math.sqrt(x * x + y * y + z * z);
                            if (diff <= 5) {
                                event.setCancelled(true);
                                mc.getNetHandler().addToSendQueueNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packetPlayerPosLook.x, packetPlayerPosLook.y, packetPlayerPosLook.z, packetPlayerPosLook.getYaw(), packetPlayerPosLook.getPitch(), true));
                            }
                        }
                    }


                    break;
                }
            }
        }
    }


}
