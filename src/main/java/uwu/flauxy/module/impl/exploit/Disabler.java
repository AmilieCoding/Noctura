package uwu.flauxy.module.impl.exploit;

import com.viaversion.viaversion.util.MathUtil;
import io.netty.buffer.Unpooled;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S03PacketTimeUpdate;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import net.minecraft.util.BlockPos;
import net.minecraft.util.Vec3;
import org.apache.commons.lang3.RandomUtils;
import uwu.flauxy.Flauxy;
import uwu.flauxy.event.Event;
import uwu.flauxy.event.EventDirection;
import uwu.flauxy.event.EventType;
import uwu.flauxy.event.impl.*;
import uwu.flauxy.event.impl.packet.EventPacket;
import uwu.flauxy.module.Category;
import uwu.flauxy.module.Module;
import uwu.flauxy.module.ModuleInfo;
import uwu.flauxy.module.setting.impl.ModeSetting;
import uwu.flauxy.utils.NumberUtil;
import uwu.flauxy.utils.PacketUtil;
import uwu.flauxy.utils.WorldUtil;
import uwu.flauxy.utils.Wrapper;
import uwu.flauxy.utils.timer.Timer;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;

import static java.lang.Math.sqrt;
import static uwu.flauxy.utils.PacketUtil.sendSilentPacket;

@ModuleInfo(name = "Disabler", displayName = "Disabler", key = -1, cat = Category.Exploit)
public class Disabler extends Module {
    private ModeSetting mode = new ModeSetting("Mode", "Dev", "Dev", "Universo Craft");


    private ArrayList<Packet> packets = new ArrayList<>();
    private ConcurrentLinkedQueue<Packet> transactions = new ConcurrentLinkedQueue<>();
    private LinkedList blocksmcpackets = new LinkedList<Packet<INetHandlerPlayServer>>();
    private final Deque<TimestampedPacket> ExeosPacket = new ArrayDeque<>();
    private final List<Packet<?>> sentinelPackets = new ArrayList<>();

    private Timer Verus = new Timer();
    private Timer timer = new Timer();
    private Timer timer1 = new Timer();
    private final Timer ExeosDelay = new Timer();
    private long lastTransaction;;
    public int tick;
    public int tiredTick;
    private long packetsToCancel;
    LinkedList<Packet> packetBuffer = new LinkedList<>();

    public Disabler() {
        this.addSettings(mode);
    }

    @Override
    public void onEnable() {
        kick = false;
        timer.reset();
        super.onEnable();
    }

    @Override
    public void onDisable() {
        super.onDisable();

    }
    boolean kick;


    public void onEvent(Event event) {
        switch (mode.getMode()){
            case "Universo Craft":{
                if(event instanceof EventSendPacket){
                    EventSendPacket e = (EventSendPacket) event;
                    Packet packet = e.getPacket();
                    if(PacketUtil.isPacketPingSpoof(packet)){
                        packetBuffer.add(packet);
                        e.setCancelled(true);
                    }
                }
                if(event instanceof EventUpdate){
                    if(timer.hasTimeElapsed(1400, false)){
                        PacketUtil.sendSilentPacket(packetBuffer.poll());
                        timer.reset();
                    }
                }

                break;
            }

            case "Redesky":{
                if(mc.thePlayer == null || mc.theWorld == null) return;
                if(event instanceof EventSendPacket){
                    EventSendPacket e = (EventSendPacket) event;
                    Packet packet = e.getPacket();
                    EventDirection direction =  e.getDirection();
                    EventType type = e.getType();
                    if(packet instanceof C03PacketPlayer && packet instanceof C0FPacketConfirmTransaction){
                        Wrapper.instance.log("Lol");
                    }

                }
                if(event instanceof EventReceivePacket){
                    EventReceivePacket e = (EventReceivePacket) event;
                    Packet packet = e.getPacket();
                    EventDirection direction =  e.getDirection();
                    EventType type = e.getType();

                }
                if(event instanceof EventUpdate){
                    mc.timer.timerSpeed = 0.99f;
                }
                if(event instanceof EventMotion){
                    EventMotion e = (EventMotion) event;
                    EventDirection direction =  e.getDirection();
                    EventType type = e.getType();

                }


                break;
            }
        }
    }

    private static class TimestampedPacket {
        private final Packet<?> packet;
        private long timestamp;

        public TimestampedPacket(final Packet<?> packet) {
            this.packet = packet;
            this.timestamp = System.currentTimeMillis();
        }
    }


}
