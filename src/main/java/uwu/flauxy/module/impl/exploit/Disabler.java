package uwu.flauxy.module.impl.exploit;

import com.viaversion.viaversion.util.MathUtil;
import io.netty.buffer.Unpooled;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.entity.item.EntityBoat;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.handshake.client.C00Handshake;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.*;
import net.minecraft.network.status.client.C01PacketPing;
import net.minecraft.util.BlockPos;
import net.minecraft.util.EnumFacing;
import net.minecraft.util.Vec3;
import org.apache.commons.lang3.RandomUtils;
import org.lwjgl.system.CallbackI;
import uwu.flauxy.Flauxy;
import uwu.flauxy.event.Event;
import uwu.flauxy.event.EventDirection;
import uwu.flauxy.event.EventType;
import uwu.flauxy.event.impl.*;
import uwu.flauxy.event.impl.packet.EventPacket;
import uwu.flauxy.module.Category;
import uwu.flauxy.module.Module;
import uwu.flauxy.module.ModuleInfo;
import uwu.flauxy.module.impl.movement.Fly;
import uwu.flauxy.module.setting.impl.ModeSetting;
import uwu.flauxy.utils.NumberUtil;
import uwu.flauxy.utils.PacketUtil;
import uwu.flauxy.utils.WorldUtil;
import uwu.flauxy.utils.Wrapper;
import uwu.flauxy.utils.timer.Timer;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;

import static java.lang.Math.sqrt;
import static uwu.flauxy.utils.PacketUtil.sendSilentPacket;

@ModuleInfo(name = "Disabler", displayName = "Disabler", key = -1, cat = Category.Exploit)
public class Disabler extends Module {
    private ModeSetting mode = new ModeSetting("Mode", "Dev", "Dev", "Universo Craft", "StelAC FlyB");


    private ArrayList<Packet> packets = new ArrayList<>();
    private ConcurrentLinkedQueue<Packet> transactions = new ConcurrentLinkedQueue<>();
    private LinkedList blocksmcpackets = new LinkedList<Packet<INetHandlerPlayServer>>();
    private final Deque<TimestampedPacket> ExeosPacket = new ArrayDeque<>();
    private final List<Packet<?>> sentinelPackets = new ArrayList<>();

    private Timer Verus = new Timer();
    private Timer timer = new Timer();
    private Timer timer1 = new Timer();
    private final Timer ExeosDelay = new Timer();
    private long lastTransaction;;
    public int tick;
    public int tiredTick;
    private long packetsToCancel;
    LinkedList<Packet> packetBuffer = new LinkedList<>();

    public Disabler() {
        this.addSettings(mode);
    }

    @Override
    public void onEnable() {
        kick = false;
        timer.reset();
        super.onEnable();
    }

    @Override
    public void onDisable() {
        super.onDisable();

    }
    boolean kick;


    public void onEvent(Event event) {
        switch (mode.getMode()){
            case "StelAC FlyB":{
                if(mc.thePlayer == null || mc.theWorld == null || mc.currentScreen instanceof GuiInventory) return;

                if(event instanceof EventUpdate){
                    if(mc.thePlayer.ticksExisted % 3 == 0){
                        mc.getNetHandler().addToSendQueue(new C0BPacketEntityAction(mc.thePlayer, C0BPacketEntityAction.Action.START_SNEAKING));
                        mc.getNetHandler().addToSendQueue(new C08PacketPlayerBlockPlacement(new BlockPos(0, 0, 0), 1, mc.thePlayer.getItemInUse(), EnumFacing.UP.getFrontOffsetX(), EnumFacing.UP.getFrontOffsetY(), EnumFacing.UP.getFrontOffsetZ()));
                    }
                    //PacketUtil.packetNoEvent(new C01PacketPing(-1));
                    if(mc.thePlayer.ticksExisted % 2 == 0){
                        PacketUtil.packetNoEvent(new C07PacketPlayerDigging(C07PacketPlayerDigging.Action.RELEASE_USE_ITEM, new BlockPos(0, -1, 0), EnumFacing.UP));
                    }
                }

                if(event instanceof EventSendPacket){
                    EventSendPacket e = (EventSendPacket) event;
                    Packet packet = e.getPacket();
                    EventDirection direction =  e.getDirection();
                    EventType type = e.getType();
                    if(packet instanceof C03PacketPlayer.C06PacketPlayerPosLook){
                        event.setCancelled(true);
                        mc.getNetHandler().addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, mc.thePlayer.onGround));
                    }
                }
                break;
            }
            case "Dev":{
                if(mc.thePlayer == null || mc.theWorld == null) return;

                if(event instanceof EventSendPacket){
                    EventSendPacket e = (EventSendPacket) event;
                    Packet packet = e.getPacket();
                    EventDirection direction =  e.getDirection();
                    EventType type = e.getType();
                    if(packet instanceof C0FPacketConfirmTransaction){
                        e.setPacket(null);
                    }
                    if(packet instanceof C00Handshake){
                        e.setPacket(null);
                    }
                    if(packet instanceof C01PacketPing){
                        e.setCancelled(true);
                    }
                    if(packet instanceof C13PacketPlayerAbilities){
                        C13PacketPlayerAbilities c = (C13PacketPlayerAbilities) packet;
                        c.setWalkSpeed(-1);
                        c.setInvulnerable(Boolean.FALSE);
                        c.setCreativeMode(true);
                    }
                    if(packet instanceof C03PacketPlayer.C04PacketPlayerPosition){
                        C03PacketPlayer.C04PacketPlayerPosition pos = (C03PacketPlayer.C04PacketPlayerPosition) packet;
                        pos.setMoving(false);
                        pos.setYaw(-1f);
                        pos.setPitch(90f);
                    }
                    if(packet instanceof C03PacketPlayer.C05PacketPlayerLook){
                        C03PacketPlayer.C05PacketPlayerLook pc = (C03PacketPlayer.C05PacketPlayerLook)packet;
                        e.setCancelled(Flauxy.INSTANCE.moduleManager.getModule(Fly.class).isToggled() || mc.thePlayer.ticksExisted % 2 == 0);
                    }
                    if(packet instanceof C0CPacketInput){
                        C0CPacketInput p = (C0CPacketInput) packet;
                        if(mc.thePlayer.ticksExisted % 20 != 0) return;
                        p.sneaking = false;
                        p.jumping = false;
                        p.forwardSpeed = -1;
                        p.strafeSpeed = -10;
                    }
                    if(packet instanceof C15PacketClientSettings){
                        C15PacketClientSettings c = (C15PacketClientSettings) packet;
                        c.chatVisibility = EntityPlayer.EnumChatVisibility.HIDDEN;
                        c.enableColors = false;
                        c.view = Integer.MIN_VALUE;
                        c.modelPartFlags = Integer.MAX_VALUE;
                    }
                }
                if(event instanceof EventReceivePacket){
                    EventReceivePacket e = (EventReceivePacket) event;
                    Packet packet = e.getPacket();
                    EventDirection direction =  e.getDirection();
                    EventType type = e.getType();
                    if(packet instanceof S39PacketPlayerAbilities){
                        S39PacketPlayerAbilities c = (S39PacketPlayerAbilities) packet;
                        c.setWalkSpeed(-1);
                        c.setInvulnerable(Boolean.FALSE);
                        c.setCreativeMode(true);
                    }
                    if(packet instanceof S42PacketCombatEvent){
                        S42PacketCombatEvent comb = (S42PacketCombatEvent) packet;
                        comb.deathMessage = "";
                    }
                    if(packet instanceof S12PacketEntityVelocity){
                        S12PacketEntityVelocity vel = (S12PacketEntityVelocity) packet;
                        vel.setMotionX(0);
                        vel.setMotionY(0);
                        vel.setMotionZ(0);
                        mc.thePlayer.sendQueue.addToSendQueue(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.prevPosX,
                                mc.thePlayer.prevPosY, mc.thePlayer.prevPosZ, false));
                    }
                }
                if(event instanceof EventUpdate){
                    mc.timer.timerSpeed = 1f;
                    //mc.thePlayer.sendQueue.addToSendQueue(new C02PacketUseEntity());
                    //EntityBoat boat = (EntityBoat) WorldUtil.spawnBoatAndInteract();
                    //if(mc.thePlayer.ticksExisted % 50 == 0 && !Objects.isNull(boat)){
                    //    PacketUtil.packetNoEvent(new C02PacketUseEntity(boat, C02PacketUseEntity.Action.INTERACT));
                        //PacketUtil.packetNoEvent(new C02PacketUseEntity(boat, boat.getLookVec().add(mc.thePlayer.getLookVec())));
                    //}



                }
                if(event instanceof EventMotion){
                    EventMotion e = (EventMotion) event;
                    EventDirection direction =  e.getDirection();
                    EventType type = e.getType();

                }


                break;
            }
        }
    }

    private static class TimestampedPacket {
        private final Packet<?> packet;
        private long timestamp;

        public TimestampedPacket(final Packet<?> packet) {
            this.packet = packet;
            this.timestamp = System.currentTimeMillis();
        }
    }


}
