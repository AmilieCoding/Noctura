package uwu.flauxy.module.impl.exploit;

import com.viaversion.viaversion.util.MathUtil;
import io.netty.buffer.Unpooled;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.*;
import net.minecraft.network.play.server.S07PacketRespawn;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.util.BlockPos;
import net.minecraft.util.Vec3;
import org.apache.commons.lang3.RandomUtils;
import uwu.flauxy.Flauxy;
import uwu.flauxy.event.Event;
import uwu.flauxy.event.EventType;
import uwu.flauxy.event.impl.*;
import uwu.flauxy.event.impl.packet.EventPacket;
import uwu.flauxy.module.Category;
import uwu.flauxy.module.Module;
import uwu.flauxy.module.ModuleInfo;
import uwu.flauxy.module.setting.impl.ModeSetting;
import uwu.flauxy.utils.NumberUtil;
import uwu.flauxy.utils.PacketUtil;
import uwu.flauxy.utils.WorldUtil;
import uwu.flauxy.utils.Wrapper;
import uwu.flauxy.utils.timer.Timer;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.util.*;
import java.util.concurrent.ConcurrentLinkedQueue;

import static java.lang.Math.sqrt;
import static uwu.flauxy.utils.PacketUtil.sendSilentPacket;

@ModuleInfo(name = "Disabler", displayName = "Disabler", key = -1, cat = Category.Exploit)
public class Disabler extends Module {
    private ModeSetting mode = new ModeSetting("Mode", "Dev", "Dev", "Verus", "Verus Combat", "Blink", "BlocksMC", "Position Spoof", "Watchdog", "Ghostly", "Simple", "Redesky", "NullStack", "Random", "Funny", "Old Verus", "Sentinel Swing", "Old Matrix", "Cubecraft");


    private ArrayList<Packet> packets = new ArrayList<>();
    private ConcurrentLinkedQueue<Packet> transactions = new ConcurrentLinkedQueue<>();
    private LinkedList blocksmcpackets = new LinkedList<Packet<INetHandlerPlayServer>>();
    private final Deque<TimestampedPacket> ExeosPacket = new ArrayDeque<>();
    private final List<Packet<?>> sentinelPackets = new ArrayList<>();

    private Timer Verus = new Timer();
    private Timer timer = new Timer();
    private Timer timer1 = new Timer();
    private final Timer ExeosDelay = new Timer();
    private long lastTransaction;;
    public int tick;
    public int tiredTick;
    private long packetsToCancel;
    private LinkedList packetBuffer = new LinkedList<Packet<INetHandlerPlayServer>>();

    public Disabler() {
        this.addSettings(mode);
    }

    @Override
    public void onEnable() {
        super.onEnable();
        ExeosPacket.clear();
        blocksmcpackets.clear();
        packetBuffer.clear();
        lastTransaction = 0;
        packets.clear();
        timer.reset();
        tiredTick = 0;
        Verus.reset();
        transactions.clear();
    }

    @Override
    public void onDisable() {
        super.onDisable();
        timer1.reset();
        timer.reset();

        this.packets.forEach(PacketUtil::sendPacket);
        this.packets.clear();

        if (!this.sentinelPackets.isEmpty())
            this.sentinelPackets.clear();
    }


    public void onEvent(Event event) {


        switch(mode.getMode()){

            case "Old Matrix":{
                if(event instanceof EventReceivePacket){

                }
                if(event instanceof EventSendPacket){
                    this.toggle();
                    EventSendPacket e = (EventSendPacket) event;

                    if(e.getPacket() instanceof C0FPacketConfirmTransaction){
                        sentinelPackets.add(e.getPacket());
                        e.setCancelled(true);
                    }
                    while(sentinelPackets.size() > 30){
                        PacketUtil.sendSilentPacket(sentinelPackets.get(sentinelPackets.size()-1));
                    }

                    if(mc.thePlayer.posY > (int)mc.thePlayer.posY){
                        if(e.getPacket() instanceof C03PacketPlayer){
                            Packet packet = e.getPacket();
                            packet = new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 0.5f, mc.thePlayer.posZ, true);
                            if(mc.thePlayer.ticksExisted % 15 == 0){
                                PacketUtil.sendSilentPacket(packet);
                                e.setCancelled(true);
                            }
                        }
                    }
                }
                if(event instanceof EventMotion){

                }
                break;
            }

            case "Simple":{
                if(event instanceof EventSendPacket){
                    EventSendPacket e = (EventSendPacket) event;
                    if(e.getPacket() instanceof C03PacketPlayer){
                        C03PacketPlayer packet = (C03PacketPlayer)e.getPacket();
                        Wrapper.instance.log("Setting Z position packet to new valueA");
                        packet.setZ(mc.thePlayer.posZ + 18);
                        mc.thePlayer.posZ = packet.getZ();
                        Wrapper.instance.log("Setting new coordinate");

                        PacketUtil.sendSilentPacket(new C03PacketPlayer.C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.2, packet.getZ(), false));
                        Wrapper.instance.log("Teleported");
                        this.toggle();
                    }
                }
                break;
            }
        }

        if (event instanceof EventMotion) {
            EventMotion em = (EventMotion) event;
            if (mode.is("Funny")) {
                PlayerCapabilities pc = new PlayerCapabilities();
                pc.isFlying = true;
                pc.isCreativeMode = true;
                sendSilentPacket(new C13PacketPlayerAbilities(pc));
            }

            if (mode.is("Watchdog")) {
                if (!event.getType().equals(EventType.PRE))
                    return;
                if (packetsToCancel > 0)
                    return;
                if (ExeosDelay.hasTimeElapsed(mc.thePlayer.ticksExisted < 120 ? 1920 : NumberUtil.generateRandom(1, 250), false)) {
                    while (!ExeosPacket.isEmpty())
                        mc.thePlayer.sendQueue.addToSendQueue(ExeosPacket.removeLast().packet);
                    ExeosDelay.reset();
                }
                if (mc.thePlayer.ticksExisted == 120) {
                    em.setX(em.getX() + 1);
                    em.setZ(em.getZ() + 1);
                }
            }

        }

        if (event instanceof EventUpdate) {


            if (mode.is("BlocksMC")) {
                try {
                    ByteArrayOutputStream b = new ByteArrayOutputStream();
                    DataOutputStream out = new DataOutputStream(b);
                    out.writeUTF(mc.thePlayer.getGameProfile().getName());
                    PacketBuffer buf = new PacketBuffer(Unpooled.buffer());
                    buf.writeBytes(b.toByteArray());
                    String value = "funny:packet";
                    mc.thePlayer.sendQueue.getNetworkManager().sendPacket(new C17PacketCustomPayload(value, buf), null);
                } catch (Exception e) { e.printStackTrace(); }
                if (timer.hasTimeElapsed(450, false)) {
                    double x = mc.thePlayer.posX;
                    double y = mc.thePlayer.posY;
                    double z = mc.thePlayer.posZ;
                    sendSilentPacket(new C03PacketPlayer.C04PacketPlayerPosition(x, y - 14.37, z, false));
                    sendSilentPacket(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, false));
                    timer.reset();
                }
            }


            if (mode.is("Verus")) {
                if (mc.thePlayer.ticksExisted % 43 == 0 && !this.transactions.isEmpty()) {
                    sendSilentPacket(this.transactions.poll());
                }
                if (mc.thePlayer.ticksExisted % 110 != 0) return;
                double x = mc.thePlayer.posX;
                double y = mc.thePlayer.posY;
                double z = mc.thePlayer.posZ;
                sendSilentPacket(new C03PacketPlayer.C04PacketPlayerPosition(x, y - 14.37, z, false));
                sendSilentPacket(new C03PacketPlayer.C04PacketPlayerPosition(x, y, z, false));
            }
        }

        if (event instanceof EventPacket) {
            EventPacket e = (EventPacket) event;
            if (mode.is("Ghostly")) {
                if(!WorldUtil.shouldNotRun()){
                    if(e.getPacket() instanceof C03PacketPlayer){
                        packetBuffer.add(e.getPacket());
                        PacketUtil.sendSilentPacket(new C0CPacketInput(mc.thePlayer.movementInput.moveStrafe, 100, true, false));
                        event.setCancelled(true);
                    }
                    if(timer.hasTimeElapsed(450, true)){
                        //Wrapper.instance.log(packetBuffer.poll() + "");
                        PacketUtil.packetNoEvent( (Packet)packetBuffer.poll());
                        packetBuffer.clear();
                    }

                }
            }

            if (mode.is("Verus Combat")) {
                if (e.getPacket() instanceof net.minecraft.network.play.client.C0FPacketConfirmTransaction || e.getPacket() instanceof net.minecraft.network.play.client.C00PacketKeepAlive)
                    e.setCancelled(true);
            }


            if (mode.is("Position Spoof")) {
                if (e.getPacket() instanceof C03PacketPlayer) {
                    final C03PacketPlayer c03 = (C03PacketPlayer) e.getPacket();
                    c03.setY(c03.getPositionY() + 0.015625);
                }
            }

            if(mode.is("Old Matrix")) {
                if(e.getPacket() instanceof C03PacketPlayer){
                    C03PacketPlayer c03 = (C03PacketPlayer) e.getPacket();
                    c03.y = mc.thePlayer.posY + 1E-5D;
                }
            }

            if (mode.is("Blink")) {
                if(e.getPacket() instanceof C03PacketPlayer){
                    if(mc.thePlayer.ticksExisted % 3 == 0){
                        e.setCancelled(true);
                    }
                }
            }

            if (mode.is("BlocksMC")) {

            }


            if (mode.is("Sentinel Swing")) {
                if (e.isOutgoing()) {
                    final Packet packet = e.getPacket();
                    if (packet instanceof C0APacketAnimation) {
                        sentinelPackets.add(packet);
                        e.setCancelled(true);
                    }
                    if (packet instanceof C0FPacketConfirmTransaction && !sentinelPackets.isEmpty()) {
                        final Packet toSend = sentinelPackets.get(0);
                        PacketUtil.sendSilentPacket(toSend);
                        sentinelPackets.remove(toSend);
                    }
                }
            }

            if (e.isIncoming()) {
                if (mode.is("Watchdog")) {
                    if (e.getPacket() instanceof C03PacketPlayer) {
                        final C03PacketPlayer C03 = (C03PacketPlayer) e.getPacket();
                        if (packetsToCancel > 0) {
                            e.setCancelled(true);
                            packetsToCancel--;
                            return;
                        }
                        if (!C03.isMoving() && C03.getRotating()) {
                            e.setCancelled(true);
                        }
                    }

                    if (mc.thePlayer.ticksExisted < 120) {
                        if (e.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer C03 = (C03PacketPlayer) e.getPacket();
                            if (!C03.isMoving() && !C03.getRotating()) {
                                e.setCancelled(true);
                            } else {
                                ExeosPacket.push(new TimestampedPacket(e.getPacket()));
                                e.setCancelled(true);
                            }
                        }
                        if (e.getPacket() instanceof C00PacketKeepAlive) {
                            ExeosPacket.push(new TimestampedPacket(e.getPacket()));
                            e.setCancelled(true);
                        }
                        if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                            ExeosPacket.push(new TimestampedPacket(e.getPacket()));
                            e.setCancelled(true);
                        }
                    }
                }
            }

            if (e.isOutgoing()) {

                if (mode.is("Watchdog")) {
                    if (e.getPacket() instanceof C03PacketPlayer) {
                        final C03PacketPlayer C03 = (C03PacketPlayer) e.getPacket();
                        if (packetsToCancel > 0) {
                            e.setCancelled(true);
                            packetsToCancel--;
                            return;
                        }
                        if (!C03.isMoving() && C03.getRotating()) {
                            e.setCancelled(true);
                        }
                    }

                    if (mc.thePlayer.ticksExisted < 120) {
                        if (e.getPacket() instanceof C03PacketPlayer) {
                            final C03PacketPlayer C03 = (C03PacketPlayer) e.getPacket();
                            if (!C03.isMoving() && !C03.getRotating()) {
                                e.setCancelled(true);
                            } else {
                                ExeosPacket.push(new TimestampedPacket(e.getPacket()));
                                e.setCancelled(true);
                            }
                        }
                        if (e.getPacket() instanceof C00PacketKeepAlive) {
                            ExeosPacket.push(new TimestampedPacket(e.getPacket()));
                            e.setCancelled(true);
                        }
                        if (e.getPacket() instanceof C0FPacketConfirmTransaction) {
                            ExeosPacket.push(new TimestampedPacket(e.getPacket()));
                            e.setCancelled(true);
                        }
                    }
                }

            }

            if (mode.is("Funny")) {
                if (this.mc.thePlayer.ticksExisted % 6 == 0) {

                    if (e.getPacket() instanceof C13PacketPlayerAbilities) {
                        C13PacketPlayerAbilities c13 = (C13PacketPlayerAbilities)e.getPacket();
                        c13.setAllowFlying(true);
                        c13.setCreativeMode(true);
                        c13.setFlying(true);
                        c13.setFlySpeed(Float.NaN);
                        c13.setInvulnerable(true);
                        c13.setWalkSpeed(Float.NaN);
                    }
                }


            }
            if (mode.is("NCP Timer")) {
                if (mc.thePlayer.ticksExisted % 30 == 0) {
                    mc.getNetHandler().getNetworkManager().sendPacket(new C03PacketPlayer.C06PacketPlayerPosLook(mc.thePlayer.posX, mc.thePlayer.posY - (mc.thePlayer.onGround ? 0.1D : 1.1D), mc.thePlayer.posZ, mc.thePlayer.rotationYaw, mc.thePlayer.rotationPitch, mc.thePlayer.onGround));
                }

            }


            if (mode.is("Random")) {
                if (e.getPacket() instanceof C10PacketCreativeInventoryAction) {
                    final C10PacketCreativeInventoryAction c10 = (C10PacketCreativeInventoryAction)e.getPacket();
                    c10.setSlotId(0);
                }

                if (e.getPacket() instanceof C13PacketPlayerAbilities) {
                    PlayerCapabilities playerCapabilities = new PlayerCapabilities();;
                    playerCapabilities.isFlying = true;
                    playerCapabilities.allowEdit = true;
                    sendSilentPacket(new C13PacketPlayerAbilities(playerCapabilities));
                }

            }

            if (mode.is("Dev")) {

            }


            if(mode.is("Redesky")) {
                if (e.getPacket() instanceof net.minecraft.network.play.client.C00PacketKeepAlive)
                    e.setCancelled(true);
                if (e.getPacket() instanceof net.minecraft.network.play.client.C0FPacketConfirmTransaction)
                    e.setCancelled(true);
                if (e.getPacket() instanceof net.minecraft.network.play.client.C13PacketPlayerAbilities)
                    e.setCancelled(true);
                if (e.getPacket() instanceof net.minecraft.network.play.client.C17PacketCustomPayload)
                    e.setCancelled(true);
                if (e.getPacket() instanceof net.minecraft.network.play.client.C18PacketSpectate)
                    e.setCancelled(true);
            }

            if (mode.is("Funny")) {
                if (e.getPacket() instanceof net.minecraft.network.play.client.C00PacketKeepAlive)
                    e.setCancelled(true);
                if (e.getPacket() instanceof net.minecraft.network.play.client.C0FPacketConfirmTransaction)
                    e.setCancelled(true);
                if (e.getPacket() instanceof net.minecraft.network.play.client.C13PacketPlayerAbilities)
                    e.setCancelled(true);
                if (e.getPacket() instanceof net.minecraft.network.play.client.C17PacketCustomPayload)
                    e.setCancelled(true);
                if (e.getPacket() instanceof net.minecraft.network.play.client.C18PacketSpectate)
                    e.setCancelled(true);
            }


            if(mode.is("NullStack")) {
                if (e.getPacket() instanceof C08PacketPlayerBlockPlacement) {
                    C08PacketPlayerBlockPlacement c08 = (C08PacketPlayerBlockPlacement)e.getPacket();
                    c08.stack = null;
                }
            }

            if (mode.is("Verus")) {
            }
        }

        if (event instanceof EventTick) {
            tick++;
        }
    }

    private static class TimestampedPacket {
        private final Packet<?> packet;
        private long timestamp;

        public TimestampedPacket(final Packet<?> packet) {
            this.packet = packet;
            this.timestamp = System.currentTimeMillis();
        }
    }


}
