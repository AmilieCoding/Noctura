package uwu.flauxy.module.impl.exploit;

import io.netty.buffer.Unpooled;
import net.minecraft.client.entity.EntityPlayerSP;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.nbt.CompressedStreamTools;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.nbt.NBTTagList;
import net.minecraft.nbt.NBTTagString;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.minecraft.network.play.server.S40PacketDisconnect;
import uwu.flauxy.event.Event;
import uwu.flauxy.event.impl.EventReceivePacket;
import uwu.flauxy.event.impl.EventUpdate;
import uwu.flauxy.module.Category;
import uwu.flauxy.module.Module;
import uwu.flauxy.module.ModuleInfo;
import uwu.flauxy.utils.PacketUtil;
import uwu.flauxy.utils.Wrapper;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Arrays;
import java.util.List;

@ModuleInfo(name = "BookFlooder", cat = Category.Exploit, key = -1, displayName = "Book Flooder")
public class BookFlooder extends Module {

    boolean write;
    C17PacketCustomPayload fallbackPacket;

    @Override
    public void onEvent(Event e) {
        if(e instanceof EventUpdate) {
            write = false;
            if(mc.thePlayer.getHeldItem() == null) {
                return;
            }

            if(write && fallbackPacket != null) {
                C17PacketCustomPayload myPacket = new C17PacketCustomPayload();
                myPacket.channel = fallbackPacket.channel;
                myPacket.data = fallbackPacket.data;
                myPacket.data.writeString("MC|BSign");
                myPacket.data = null;
                Wrapper.instance.log(myPacket.getBufferData().readByte() + "");
                myPacket.getBufferData().writeByte(1222);
                Wrapper.instance.log(myPacket.getBufferData().readByte() + "");
                PacketUtil.sendSilentPacket(myPacket);
                fallbackPacket = null;
                write = false;
            }

        }
        if(e instanceof EventReceivePacket){
            // just to catch the nbt data lol
            if(((EventReceivePacket)e).getPacket() instanceof S40PacketDisconnect){
                // kick packet
                e.setCancelled(true);
            }
            if(((EventReceivePacket) e).getPacket() instanceof C17PacketCustomPayload){
                if(fallbackPacket.channel.equalsIgnoreCase("MC|BSign")){
                    fallbackPacket = ((EventReceivePacket) e).getPacket();
                    write = true;
                    e.setCancelled(true);
                }
            }
        }
    }
}