package uwu.flauxy.module.impl.exploit;

import com.darkmagician6.eventapi.EventTarget;
import net.minecraft.network.Packet;
import net.minecraft.network.play.INetHandlerPlayServer;
import net.minecraft.network.play.client.C00PacketKeepAlive;
import net.minecraft.network.play.client.C03PacketPlayer;
import net.minecraft.network.play.client.C0FPacketConfirmTransaction;
import net.minecraft.network.play.server.S08PacketPlayerPosLook;
import net.minecraft.network.play.server.S12PacketEntityVelocity;
import uwu.flauxy.event.EventMotion;
import uwu.flauxy.event.EventReceivePacket;
import uwu.flauxy.event.EventSendPacket;
import uwu.flauxy.event.EventUpdate;
import uwu.flauxy.module.Category;
import uwu.flauxy.module.Module;
import uwu.flauxy.module.ModuleInfo;
import uwu.flauxy.module.setting.impl.ModeSetting;
import uwu.flauxy.utils.PacketUtil;
import uwu.flauxy.utils.timer.Timer;

import java.util.LinkedList;
import java.util.concurrent.ConcurrentLinkedQueue;

@ModuleInfo(name = "Disabler", displayName = "Disabler", key = -1, cat = Category.Exploit)
public class Disabler extends Module {

    public ModeSetting mode = new ModeSetting("Mode", "BlocksMC", "BlocksMC", "Ghostly");

    private LinkedList packetBuffer = new LinkedList<Packet<INetHandlerPlayServer>>();
    private int ticks = 0;
    boolean expectedTeleport;
    private final ConcurrentLinkedQueue<Packet<?>> transactions = new ConcurrentLinkedQueue<>();
    Timer timer = new Timer();

    public Disabler(){
        addSettings(mode);
    }

    @Override
    public void onEnable() {
        ticks = 0;
        transactions.clear();
        packetBuffer.clear();
    }

    @EventTarget
    public void onSend(EventSendPacket event){
        switch(mode.getMode()){
            case "BlocksMC":{
                if (event.getPacket() instanceof net.minecraft.network.play.client.C0BPacketEntityAction) {
                    event.setCancelled(true);
                    break;
                }
                if (event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    short uid = ((C0FPacketConfirmTransaction)event.getPacket()).getUid();
                    if (uid > 0 && uid < 100){
                        return;
                    }
                    if (this.transactions.size() > 700){
                        PacketUtil.packetNoEvent(this.transactions.poll());
                    }
                    this.transactions.add(event.getPacket());
                    event.setCancelled(true);
                }
                if(event.getPacket() instanceof C0FPacketConfirmTransaction) {
                    packetBuffer.add(event.getPacket());
                    event.setCancelled(true);
                }

                if(event.getPacket() instanceof C00PacketKeepAlive) {
                    packetBuffer.add(event.getPacket());
                    event.setCancelled(true);
                }

                if(packetBuffer.size() > 350) {
                    mc.getNetHandler().addToSendQueueNoEvent((Packet) packetBuffer.poll());

                }
                //void tp
                if(event.getPacket() instanceof C03PacketPlayer) {
                    C03PacketPlayer c03 = (C03PacketPlayer)event.getPacket();
                    if(expectedTeleport) {
                        event.setCancelled(true);
                        //c03.setY(c03.y - 100.393304 - (mc.thePlayer.posY / (int)mc.thePlayer.posY));
                        float pos = -1;
                        c03.setY(pos + 75E-8);
                        c03.setMoving(false);
                        //c03.onGround = false;
                        PacketUtil.packetNoEvent(event.getPacket());
                        expectedTeleport = false;

                    }

                }
                break;
            }
        }
    }

    @EventTarget
    public void onReceive(EventReceivePacket event){
        switch(mode.getMode()){
            case "BlocksMC":{
                if(timer.hasTimeElapsed(490L, true)){
                    timer.reset();
                    if(!packetBuffer.isEmpty()){
                        PacketUtil.packetNoEvent((Packet)packetBuffer.poll());
                    }
                }
                if(event.getPacket() instanceof S08PacketPlayerPosLook) {
                    S08PacketPlayerPosLook packetPlayerPosLook = (S08PacketPlayerPosLook) event.getPacket();
                    double x = packetPlayerPosLook.x - mc.thePlayer.posX;
                    double y = packetPlayerPosLook.y - mc.thePlayer.posY;
                    double z = packetPlayerPosLook.z - mc.thePlayer.posZ;
                    double diff = Math.sqrt(x * x + y * y + z * z);
                    if (diff <= 8) {
                        event.setCancelled(true);
                        mc.getNetHandler().addToSendQueueNoEvent(new C03PacketPlayer.C06PacketPlayerPosLook(packetPlayerPosLook.x, packetPlayerPosLook.y, packetPlayerPosLook.z, packetPlayerPosLook.getYaw(), packetPlayerPosLook.getPitch(), true));
                    }
                }
                break;
            }
        }
    }

    @EventTarget
    public void onMotion(EventMotion event){
        switch(mode.getMode()){
            case "BlocksMC":{
                if(ticks % 50 == 0){
                    expectedTeleport = true;
                }
                ticks++;
                break;
            }
        }
    }

    @EventTarget
    public void onUpdate(EventUpdate event){
        switch (mode.getMode()){
            case "BlocksMC":{
                if(mc.thePlayer.ticksExisted % 180 == 0){
                    while (transactions.size() > 200){
                        PacketUtil.packetNoEvent(transactions.poll());
                    }
                }
                break;
            }
        }
    }


}
