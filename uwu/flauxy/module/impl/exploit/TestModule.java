package uwu.flauxy.module.impl.exploit;

import io.netty.buffer.ByteBuf;
import io.netty.buffer.Unpooled;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.PlayerCapabilities;
import net.minecraft.nbt.NBTTagCompound;
import net.minecraft.network.Packet;
import net.minecraft.network.PacketBuffer;
import net.minecraft.network.login.client.C00PacketLoginStart;
import net.minecraft.network.play.client.C13PacketPlayerAbilities;
import net.minecraft.network.play.client.C15PacketClientSettings;
import net.minecraft.network.play.client.C16PacketClientStatus;
import net.minecraft.network.play.client.C17PacketCustomPayload;
import net.minecraft.network.play.server.S40PacketDisconnect;
import uwu.flauxy.event.Event;
import uwu.flauxy.event.impl.EventReceivePacket;
import uwu.flauxy.event.impl.EventUpdate;
import uwu.flauxy.module.Category;
import uwu.flauxy.module.Module;
import uwu.flauxy.module.ModuleInfo;
import uwu.flauxy.module.setting.impl.ModeSetting;
import uwu.flauxy.module.setting.impl.NumberSetting;
import uwu.flauxy.utils.PacketUtil;
import uwu.flauxy.utils.WorldUtil;
import uwu.flauxy.utils.Wrapper;

@ModuleInfo(name = "TestModule", displayName = "Test Module", key = -1, cat = Category.Exploit)
public class TestModule extends Module {

    public ModeSetting mode = new ModeSetting("Mode", "Hypixel", "Verus", "Hypixel", "Funcraft");
    NumberSetting speed = new NumberSetting("Speed", 4.2, 0.1, 6, 0.1).setCanShow((m) -> mode.is("Verus"));

    public ModeSetting verusMode = new ModeSetting("Verus Mode", "Damage", "Damage", "Normal").setCanShow((m) -> mode.is("Verus"));


    public TestModule(){
        addSettings(mode, verusMode, speed);
    }
    @Override
    public void onEvent(Event e) {
        if(mc.thePlayer != null){
            if(mc.thePlayer.ticksExisted > 3){
                if(e instanceof EventReceivePacket){
                    if(WorldUtil.shouldNotRun()) return;
                    EventReceivePacket event = (EventReceivePacket) e;
                    /*Wrapper.instance.log("§aReceived" + event.getPacket());
                    Wrapper.instance.log("§a" + event.getPacket() + " type: " + event.getType() + " direction: " + event.getDirection() + "");
                    System.out.println("Received " + event.getPacket() + " type: " + event.getType() + " direction: " + event.getDirection() + "");*/
                    if(event.getPacket() instanceof S40PacketDisconnect){
                        PacketUtil.packetNoEvent(new C00PacketLoginStart(mc.session.getProfile()));
                        PacketUtil.packetNoEvent(new C17PacketCustomPayload(null, (new PacketBuffer(Unpooled.buffer())).writeString("blocksmc xD")));
                        PacketUtil.packetDelayed(new C16PacketClientStatus(C16PacketClientStatus.EnumState.PERFORM_RESPAWN), 100);
                        event.setCancelled(true);
                        Packet p;
                        PlayerCapabilities cap = mc.thePlayer.capabilities;
                        cap.writeCapabilitiesToNBT(new NBTTagCompound());
                        cap.isCreativeMode = true;
                        PacketUtil.packetNoEvent(new C17PacketCustomPayload(null, (new PacketBuffer(Unpooled.buffer())).writeString("staff")));
                        for(int i = 0; i < 200; i++){
                            PacketUtil.sendSilentPacket(new C15PacketClientSettings("_______________________", -1, EntityPlayer.EnumChatVisibility.getEnumChatVisibility(-1), false, -1));
                        }
                        S40PacketDisconnect s40 = (S40PacketDisconnect)event.getPacket();
                        p = s40;
                        try {
                            System.out.println("Cancelling ban");
                            Wrapper.instance.log("Cancelling ban");
                            s40.wait(500000000L);
                            Thread t = new Thread();
                            t.start();
                            Thread.sleep(92000000000000000L);
                            if(!t.isInterrupted())
                                s40.processPacket(mc.getNetHandler());
                                event.setPacket(p);
                        }catch (InterruptedException ie){
                            System.out.println("Processed default disconnect packet");
                            Wrapper.instance.log("Processed default disconnect packet");
                            s40.processPacket(mc.getNetHandler());
                        }
                        PacketUtil.packet(p);

                    }

                }
            }
        }
    }

}
